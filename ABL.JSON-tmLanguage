{ "name": "OpenEdge ABL",
  "scopeName": "source.abl", 
  "fileTypes": ["p","i","cls"], 
  "patterns": [
    {
      "name": "comment.testing",
      "match": "comment:"
    },
    {
      "comment": "regular comment block.  todo - require space when compile, if yes then change to not highlight",
      "name": "comment.block.source.abl",
      "begin": "/\\*",
      "end": "\\*/",
      "patterns": [
        {
          "name": "comment.block.source.abl",
          "begin": "/\\*",
          "end": "\\*/"  
        }
      ]
    },
    
    {
      "name": "constant.testing",
      "match": "constant:"
    },
    {
      "comment": "numbers only - not for hex codes which never show up in ABL",
      "name": "constant.numeric.source.abl",
      "match": "\\b\\d+\\b"
    },
    {
      "comment": "html colors",
      "name": "constant.htmlColors.source.abl",
      "match": "#[0-9a-fA-F]{6}"
    },
    {
      "comment": "boolean conditions.",
      "name": "constant.character.source.abl",
      "match": "(?i)(=|eq|<|lt|>|gt|<=|lteq|>=|gteq|<>)"
    },
    {
      "comment": "math operators.",
      "name": "constatn.character.math.operator.source.abl",
      "match": "(|\\+|\\-|\\*|/)"
    },
    {
      "comment": "constants - simple list.  todo - any more to add?",
      "name": "constant.language.source.abl",
      "match": "(?i)\\b(and|as|false|like|no(?!-)|not|of|or|to|true|yes)\\b"
    },
    {
      "comment": "operators.",
      "name": "constant.languange.source.abl",
      "match": "(?i)\\b(and|not|or|to)\\b"
    },
    
    {
      "name": "entity.testing",
      "match": "entity:"
    },
    {
      "comment": "constructor/destructor method",
      "name": "meta.function.source.abl",
      "captures": {
        "1": { "name": "entity.name.function.abl" },
        "2": { "name": "storage.modifier.abl" },
        "3": { "name": "entity.name.hidden.abl"}
              },
      "match": "(?i)(constructor|destructor)\\s+(private|public)\\s+([a-z]+)"
    },
    {
      "comment": "function",
      "name": "meta.function.source.abl",
      "captures": {
        "1": { "name": "keyword.control.source.abl" },
        "2": { "name": "entity.name.function.abl" },
        "3": { "name": "keyword.other.source.abl" },
        "4": { "name": "storage.type.datatype.abl" }
      },
      "match": "(?i)(function)\\s+([a-z0-9_-]+)\\s(returns)\\s(character|logical|integer|int64)(\\s+)?(\\(|\\n)"
    },
    {
      "comment": "main block",
      "name": "meta.function.source.abl",
      "captures": {
        "1": { "name": "entity.name.function.abl"}
      },
      "match": "(?i)(main(\\-)?block):"
    },
    {
      "comment": "method",
      "name": "meta.function.source.abl",
      "captures": {
        "1": { "name": "keyword.control.source.abl" },
        "2": { "name": "storage.modifier.abl" },
        "3": { "name": "storage.type.datatype.abl" },
        "4": { "name": "entity.name.function.abl" }
      },
      "match": "(?i)(method)\\s+(private|public)\\s+([a-zA-Z]+)\\s+([a-zA-Z]+)"
    },
    {
      "comment": "procedure",
      "name": "meta.function.source.abl",
      "captures": {
        "1": { "name": "keyword.control.source.abl" },
        "2": { "name": "entity.name.function.abl" }
      },
      "match": "(?i)(procedure)\\s+([a-z0-9_-]+)(:|\\(|\\n)"
    },
    
    {
      "name": "invalid.testing",
      "match": "invalid:"
    },
    
    {
      "name": "keyword.testing",
      "match": "keyword:"
    },
    {
      "comment": "property",
      "name": "meta.property.source.abl",
      "captures": {
        "2": {"name": "keyword.other.source.abl"},
        "3": {"name": "keyword.other.property.source.abl"},
        "4": {"name": "variable.property.abl"},
        "5": {"name": "constant.other.source.abl"},
        "6": {"name": "storage.type.source.abl"}
      },
      "match": "(?i)define\\s+property\\s+p[A-Z][a-zA-Z0-9]+\\s+as\\s+(character|decimal|integer|int64|logical)"
    },
    {
      "comment": "control keywords.",
      "name": "keyword.control.source.abl",
      "match": "(?i)\\b(ambiguous|available|do:?|case|else|exclusive-lock|find\\s+(first|last)?|for\\s+(each|first|last)|if|no-error|no-lock|no-wait|otherwise|repeat|return|then|transaction:?|use-index|when|where|while)\\b"
    },

    {
      "comment": "frame keywords.",
      "name": "keyword.other.frames.source.abl",
      "match": "(?i)\\b(colon|cols|format|no-box|no-labels|label|initial|side-labels|skip|width|with)\\b"
    },
    {
      "comment": "general keywords.",
      "name": "keyword.other.statement.source.abl",
      "match": "(?i)\\b(assign|can-find(\\((first|last))?|create|delete|delimiter|disable|display|enable|export|import|input\\s+(from|close)|output\\s+(to|thru|through)|put|set|triggers for load of|unformatted|update)\\b"
    },
    {
      "comment": "class keywords.",
      "name": "keyword.other.class.source.abl",
      "match": "(?i)\\b(class|implements|inherits)\\b"
    },
    {
      "comment": "ends keywords.",
      "name": "keyword.control.end.source.abl",
      "match": "(?i)end(\\s+(case|constructor|destructor|function|method|procedure))?."
    },
    

    {
      "name": "storage.testing",
      "match": "storage:"
    },
    {
      "comment": "getter and setter only",
      "match": "(?i)((private|protected|public)\\s+)?(get|set)(\\.|\\s)", 
      "captures": {
        "2": {"name": "storage.modifier.source.abl"},
        "3": {"name": "keyword.other.property.source.abl"}
      }
    },
    {
      "name": "storage.type.define.abl",
      "match": "(?i)\\b(define\\s+(((new\\s+)?shared\\s+)?(variable|stream|buffer)|((input|input-output|output)\\s+parameter)|temp-table|query)|form)\\b"
    },

    {
      "name": "storage.type.source.abl",
      "match": "(?i)\\b(?<!&)(character|(?<!-)handle|dataset-handle|dataset|field|(?<!-)index|logical|integer|stream|frame [a-z]+)(?!\\s*\\()\\b"
    },

    {
      "name": "string.testing",
      "match": "string:"
    },
    
    {
      "name": "support.testing",
      "match": "support:"
    },

    {
      "name": "variable.testing",
      "match": "variable:"
    },
    {
      "comment": "variable & properties - Synergy naming conventions",
      "name": "variable.other.synergy.source.abl",
      "match": "\\b(lv|p|sv|v)(-|[A-Z])[a-zA-Z0-9_-]+\\b"
    },
    {
      "comment": "paramaters - Synergy naming conventions",
      "name": "variable.parameter.synergy.source.abl",
      "match": "\\b(i|ip|o|op|io)(-|[A-Z])[a-zA-Z0-9_-]+\\b"
    },

 



    {
      "comment": "Single quoted string  - use [^(doublequote)\r\n]*",
      "match": "('(?:'|.)*?')",  
      "name": "string.single.source.abl"
    },

    {
      "name": "string.double.source.abl",
      "match": "\"\"[a-zA-Z0-9_\\.\\-]+\"\""
    },

    {
      "name": "string.double.complex.abl",
      "begin": "(\"(?!\"[a-zA-Z]+)|\"\"[a-zA-Z]+)",
      "end": "\"(?!\")",
      "patterns": [
        {
          "name": "constant.character.escape.abl",
          "match": "(~(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)|\"\")"
        }
      ]
    },

    

    
    {
      "match": "(?i)\\b(like)\\s+([a-zA-Z0-9_\\.-]+)",
      "captures": {
        "1": { "name": "keyword.type.source.abl" },
        "2": { "name": "storage.type.source.abl" }
      }
    },

 

    {
      "name": "support.function.abl",
      "match": "(?i)(\\b[a-z][a-z0-9_-]*?\\b\\s*)(?=\\s*\\(.*?\\))",
      "captures": {
        "1": { "name": "support.function.source.abl" }
      }
    },

    {
      "name": "support.function.abl",
      "match": "(?i)\\b(run) ([a-z][a-z0-9_-]*?)\\b(\\s*\\(.*?\\))?",
      "captures": {
        "1": { "name": "keyword.statement.source.abl" },
        "2": { "name": "support.function.source.abl" }
      }
    },



    {
      "name": "meta.function.bracket.abl",
      "match": "(?i)(\\{[a-z0-9_\\./-]+)",
      "captures": {
        "1": { "name": "support.function.source.abl" }
      }
    },

    {
      "name": "meta.function.bracket.abl",
      "match": "\\}",
      "captures": {
        "0": { "name": "support.function.source.abl" }
      }
    }
  ],
  "uuid": "3bcebd60-f6cc-404f-930a-528f32956502"
}