{ "name": "OpenEdge ABL",
  "scopeName": "source.abl", 
  "fileTypes": ["p","i","cls"], 
  "patterns": [
    {
      "match": "comment:",
      "name": "comment.testing"
    },
    {
      "comment": "regular comment block.  todo - require space when compile, if yes then change to not highlight",
      "begin": "/\\*",
      "end": "\\*/",
      "name": "comment.block.source.abl",
      "patterns": [
        {
          "begin": "/\\*",
          "end": "\\*/",  
          "name": "comment.block.source.abl"
        }
      ]
    },
    
    {
      "match": "constant:",
      "name": "constant.testing"
    },
    { "include": "#constantHTMLColors" },
    { "include": "#constantNumbers" },
    {
      "comment": "boolean conditions.",
      "match": "(?i)\\s(=|eq|<|lt|>|gt|<=|le|>=|ge|<>)",
      "name": "constant.character.source.abl"
    },
    {
      "comment": "math operators.",
      "match": "(\\+|\\-|\\*|/)",
      "name": "constant.character.math.operator.source.abl"
    },
    {
      "comment": "constants - operators - simple list. ",
      "match": "(?i)\\b(and|false|no(?!-)|not|of|or|to|true|yes)\\b",
      "name": "constant.language.source.abl"
    },
    
    {
      "name": "entity.testing",
      "match": "entity:"
    },
    {
      "comment": "constructor/destructor method",
      "match": "(?i)(constructor|destructor)\\s+(private|public)\\s+([a-z]+)",
      "name": "meta.function.source.abl",
      "captures": {
        "1": { "name": "entity.name.function.abl" },
        "2": { "name": "storage.modifier.abl" },
        "3": { "name": "entity.name.hidden.abl"}
              }
    },
    {
      "comment": "function",
      "match": "(?i)(function)\\s+([a-z0-9_-]+)\\s(returns)\\s(character|date|decimal|logical|integer|int64)(\\s+)?(\\(|\\n)",
      "name": "meta.function.source.abl",
      "captures": {
        "1": { "name": "keyword.control.source.abl" },
        "2": { "name": "entity.name.function.abl" },
        "3": { "name": "keyword.other.source.abl" },
        "4": { "name": "storage.type.datatype.abl" }
      }
    },
    {
      "comment": "main block",
      "match": "(?i)(main(\\-)?block):",
      "name": "meta.function.source.abl",
      "captures": {
        "1": { "name": "entity.name.function.abl"}
      }
    },
    {
      "comment": "method",
      "match": "(?i)(method)\\s+(private|public)\\s+([a-zA-Z]+)\\s+([a-zA-Z]+)",
      "name": "meta.function.source.abl",
      "captures": {
        "1": { "name": "keyword.control.source.abl" },
        "2": { "name": "storage.modifier.abl" },
        "3": { "name": "storage.type.datatype.abl" },
        "4": { "name": "entity.name.function.abl" }
      }
    },
    {
      "comment": "procedure",
      "match": "(?i)(procedure)\\s+([a-z0-9\\/_-]+)(:|\\(|\\n)",
      "name": "meta.function.source.abl",
      "captures": {
        "1": { "name": "keyword.control.source.abl" },
        "2": { "name": "entity.name.function.abl" }
      }
    },
    
    {
      "match": "exception:",
      "name": "support.type.exception.testing"
    },

    {
      "match": "invalid:",
      "name": "invalid.testing"
    },
    
    {
      "match": "keyword:",
      "name": "keyword.testing"
    },
    {
      "comment": "control keywords.",
      "match": "(?i)\\b(ambiguous|available|do:?|case|else|exclusive-lock|find\\s+(first|last)?|for\\s+(each|first|last)|if|no-error|no-lock|no-wait|otherwise|repeat|return|then|transaction:?|use-index|when|where|while)\\b",
      "name": "keyword.control.source.abl"
    },
    {
      "comment": "frame keywords.",
      "match": "(?i)\\b(colon|cols|format|no-box|no-labels|label|initial|side-labels|skip|width|with)\\b",
      "name": "keyword.other.frames.source.abl"
    },
    {
      "comment": "general keywords.",
      "match": "(?i)\\b(alert-box|assign|can-find(\\((first|last))?|create|delete|delimiter|disable|display|enable|export(\\sdelimiter)?|import(\\sdelimiter)?|input\\s+(from|close)|output\\s+(close|thru|through|to)|message|put(\\sunformatted)?|set|triggers for load of|update|view-as)\\b",
      "name": "keyword.other.statement.source.abl"
    },
    {
      "comment": "class keywords.",
      "match": "(?i)\\b(class|implements|inherits)\\b",
      "name": "keyword.other.class.source.abl"
    },
    {
      "comment": "ends keywords.",
      "match": "(?i)(end)(\\s+(case|class|constructor|destructor|function|method|procedure))?\\.",
      "captures": {
        "1": {"name": "keyword.control.end.source.abl"},
        "2": {"name": "keyword.control.end.source.abl"}
      }
    },
    
    {
      "match": "punctuation:",
      "name": "punctuation.string.testing"
    },
    
    {
      "match": "storage:",
      "name": "storage.testing"
    },
    {
      "comment": "buffer",
      "match": "(?i)(define\\s+buffer)\\s+(b|bf)([A-Z][a-zA-Z0-9-]+)\\s+(for)\\s+([a-zA-Z0-9-]+)",
      "captures": {
        "1": {"name": "keyword.other.source.abl"},
        "2": {"name": "variable.property.abl"},
        "3": {"name": "variable.property.abl"},
        "4": {"name": "constant.other.source.abl"},
        "5": {"name": "text.other.source.abl"},
        "6": {"name": "text.other.source.abl"}
      }
    },
    {
      "comment": "parameters - for functions and methods",
      "match": "(?i)(input)\\s+((i|ip)[A-Z][a-zA-Z0-9]+)\\s+(as\\s+(character|date|decimal|integer|int64|logical)|(like)\\s+([a-zA-Z0-9-]+\\.[a-zA-Z0-9_-]+))",
      "captures": {
        "1": {"name": "keyword.other.source.abl"},
        "2": {"name": "variable.property.abl"},
        "3": {"name": "variable.property.abl"},
        "4": {"name": "constant.other.source.abl"},
        "5": {"name": "storage.type.source.abl"},
        "6": {"name": "constant.other.source.abl"},
        "7": {"name": "text.other.source.abl"}
      }
    },
    {
      "comment": "parameters - for procedures",
      "match": "(?i)(define)\\s+(input|input-output|output)\\s+(parameter)\\s+((i|ip|io|o|op)[A-Z][a-zA-Z0-9]+)\\s+(as\\s+(character|date|decimal|integer|int64|logical)|(like)\\s+([a-zA-Z0-9-]+\\.[a-zA-Z0-9_-]+))(\\s+no-undo)?\\.",
      "captures": {
        "1": {"name": "keyword.other.source.abl"},
        "2": {"name": "keyword.other.source.abl"},
        "3": {"name": "keyword.other.source.abl"},
        "4": {"name": "variable.property.abl"},
        "5": {"name": "variable.property.abl"},
        "6": {"name": "constant.other.source.abl"},
        "7": {"name": "storage.type.source.abl"},
        "8": {"name": "consant.other.source.abl"},
        "9": {"name": "text.other.source.abl"},
        "10": {"name": "keyword.other.source.abl"}
      }
    },
    {
      "comment": "property",
      "match": "(?i)(define\\s+property)\\s+(p[A-Z][a-zA-Z0-9]+)\\s+(as)\\s+(character|date|decimal|integer|int64|logical)",
      "captures": {
        "1": {"name": "keyword.other.source.abl"},
        "2": {"name": "variable.property.abl"},
        "3": {"name": "constant.other.source.abl"},
        "4": {"name": "storage.type.source.abl"}
      }
    },
    {
      "comment": "property - getter and setter only",
      "match": "(?i)((private|protected|public)\\s+)?(get|set)(\\.)", 
      "captures": {
        "2": {"name": "storage.modifier.source.abl"},
        "3": {"name": "keyword.other.property.source.abl"}
      }
    },
    {
      "comment": "query",
      "match": "(?i)(define\\s+query)\\s+((q|qy)[A-Z][a-zA-Z0-9-]+)\\s+(for)\\s+([a-zA-Z0-9-]+)",
      "captures": {
        "1": {"name": "keyword.other.source.abl"},
        "2": {"name": "variable.property.abl"},
        "3": {"name": "variable.property.abl"},
        "4": {"name": "constant.other.source.abl"},
        "5": {"name": "text.other.source.abl"}
      }
    },
    {
      "comment": "stream",
      "match": "(?i)(define\\s+stream)\\s+([a-zA-Z0-9]+)\\.",
      "captures": {
        "1": {"name": "keyword.other.source.abl"},
        "2": {"name": "variable.property.abl"}
      }
    },
    {
      "comment": "variable",
      "begin": "(define\\s+)(new\\s+)?(shared\\s+)?(variable)",
      "beginCaptures": {
        "1": {"name": "keyword.other.source.abl"},
        "2": {"name": "keyword.other.source.abl"},
        "3": {"name": "keyword.other.source.abl"},
        "4": {"name": "keyword.other.source.abl"}
      },
      "patterns": [
        {
          "match": "\\b(as|like)\\b",
          "name": "constant.other.source.abl"
        },
        { "include": "#constantHTMLColors" },
        { "include": "#constantNumbers" },
        { "include": "#dataTypes" },
        { "include": "#defineKeywords" },
        { "include": "#fileField" },
        { "include": "#quotedStrings" },
        { "include": "#variableNames" }
      ],
      "end": "\\."
    },
    

    {
      "match": "(?i)\\b(define\\s+(new\\s+)?(shared\\s+)?(temp-table|form))\\b",
      "name": "storage.type.define.abl"
    },

    {
      "match": "(?i)\\b(?<!&)((?<!-)handle|dataset-handle|dataset|field|(?<!-)index|frame [a-z]+)(?!\\s*\\()\\b",
      "name": "storage.type.source.abl"
    },

    {
      "match": "string:",
      "name": "string.testing"
    },
    { "include": "#quotedStrings" },

    {
      "match": "support:",
      "name": "support.testing"
    },
    {
      "comment": "includes",
      "match": "\\{[a-zA-Z0-9_\\.\\/\\-()\\s]+\\}",
      "name": "support.other.source.abl"
    },
    {
      "comment": "reprocessors",
      "match": "\\{&[a-zA-Z0-9_\\.\\/\\-\\s]+\\}",
      "name": "support.function.source.abl"
    },

    {
      "match": "regular text:",
      "name": "text"
    },
    { "include": "#fileField" },

    {
      "match": "variable:",
      "name": "variable.testing"
    },
    {
      "comment": "paramaters - Synergy naming conventions",
      "match": "\\b(i|ip|o|op|io)(-|[A-Z])[a-zA-Z0-9_-]+\\b",
      "name": "variable.parameter.synergy.source.abl"
    },
    { "include": "#variableNames" },

 



    
    
    

    
    
 

 
    {
      "match": "(?i)\\b(run) ([a-z][a-z0-9_-]*?)\\b(\\s*\\(.*?\\))?",
      "name": "support.function.abl",
      "captures": {
        "1": { "name": "keyword.statement.source.abl" },
        "2": { "name": "support.function.source.abl" }
      }
    }



    
    
    
  ],
  "repository": {
    "progressComment": {
      "patterns": [
        {
          "begin": "/\\*",
          "end": "\\*/",  
          "name": "comment.block.source.abl"
        }
      ]
    },
    "constantNumbers": {
      "comment": "numbers only - not for hex codes which never show up in ABL",
      "match": "\\b\\d+\\b",
      "name": "constant.numeric.source.abl"
    },
    "constantHTMLColors": {
      "comment": "html colors",
      "match": "#[0-9a-fA-F]{6}",
      "name": "constant.numeric.source.abl"
    },
    "dataTypes": {
      "comment": "data types - ABL specific",
      "match": "\\b(character|date|decimal|integer|int64|logical)\\b",
      "name": "storage.type.source.abl"
    },
    "defineKeywords": {
      "comment": "define statment keywords (others)",
      "match": "\\b(format|initial|no-undo)\\b",
      "name": "keyword.other.source.abl"
    },
    "fileField": {
      "comment": "file.field referencesc",
      "match": "\\b([a-zA-Z0-9-]+\\.[a-zA-Z0-9_-]+)\\b",
      "name": "text.other.source.abl"
    },
    "quotedStrings": {
      "comment": "quoted strings",
      "patterns": [
        {
          "comment": "Single quoted string",
          "match": "('(?:'|.)*?')",  
          "name": "string.single.source.abl"
        },
        {
          "comment": "Double quoted string",
          "match": "(\"(?:\"|.)*?\")",
          "name": "string.double.source.abl"
        }
      ]
    },
    "variableNames": {
      "comment": "variable & properties - Synergy naming conventions",
      "match": "\\b(lv|p|sv|v)(-|[A-Z])[a-zA-Z0-9_-]+\\b",
      "name": "variable.other.synergy.source.abl"
    }
 
  },  
  "uuid": "3bcebd60-f6cc-404f-930a-528f32956502"
}